// Code generated by protoc-gen-go. DO NOT EDIT.
// source: search.proto

package omniscience

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type QueryDocumentsRequest struct {
	Query string `protobuf:"bytes,1,opt,name=query" json:"query,omitempty"`
}

func (m *QueryDocumentsRequest) Reset()                    { *m = QueryDocumentsRequest{} }
func (m *QueryDocumentsRequest) String() string            { return proto.CompactTextString(m) }
func (*QueryDocumentsRequest) ProtoMessage()               {}
func (*QueryDocumentsRequest) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{0} }

func (m *QueryDocumentsRequest) GetQuery() string {
	if m != nil {
		return m.Query
	}
	return ""
}

func init() {
	proto.RegisterType((*QueryDocumentsRequest)(nil), "omniscience.QueryDocumentsRequest")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Search service

type SearchClient interface {
	// Searches all documents based on a simple text query.
	Query(ctx context.Context, in *QueryDocumentsRequest, opts ...grpc.CallOption) (Search_QueryClient, error)
}

type searchClient struct {
	cc *grpc.ClientConn
}

func NewSearchClient(cc *grpc.ClientConn) SearchClient {
	return &searchClient{cc}
}

func (c *searchClient) Query(ctx context.Context, in *QueryDocumentsRequest, opts ...grpc.CallOption) (Search_QueryClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Search_serviceDesc.Streams[0], c.cc, "/omniscience.Search/Query", opts...)
	if err != nil {
		return nil, err
	}
	x := &searchQueryClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Search_QueryClient interface {
	Recv() (*Document, error)
	grpc.ClientStream
}

type searchQueryClient struct {
	grpc.ClientStream
}

func (x *searchQueryClient) Recv() (*Document, error) {
	m := new(Document)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Search service

type SearchServer interface {
	// Searches all documents based on a simple text query.
	Query(*QueryDocumentsRequest, Search_QueryServer) error
}

func RegisterSearchServer(s *grpc.Server, srv SearchServer) {
	s.RegisterService(&_Search_serviceDesc, srv)
}

func _Search_Query_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(QueryDocumentsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SearchServer).Query(m, &searchQueryServer{stream})
}

type Search_QueryServer interface {
	Send(*Document) error
	grpc.ServerStream
}

type searchQueryServer struct {
	grpc.ServerStream
}

func (x *searchQueryServer) Send(m *Document) error {
	return x.ServerStream.SendMsg(m)
}

var _Search_serviceDesc = grpc.ServiceDesc{
	ServiceName: "omniscience.Search",
	HandlerType: (*SearchServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Query",
			Handler:       _Search_Query_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "search.proto",
}

func init() { proto.RegisterFile("search.proto", fileDescriptor3) }

var fileDescriptor3 = []byte{
	// 135 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x29, 0x4e, 0x4d, 0x2c,
	0x4a, 0xce, 0xd0, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0xce, 0xcf, 0xcd, 0xcb, 0x2c, 0x4e,
	0xce, 0x4c, 0xcd, 0x4b, 0x4e, 0x95, 0xe2, 0x4b, 0xc9, 0x4f, 0x2e, 0xcd, 0x4d, 0xcd, 0x2b, 0x81,
	0x48, 0x2a, 0xe9, 0x72, 0x89, 0x06, 0x96, 0xa6, 0x16, 0x55, 0xba, 0x40, 0x85, 0x8b, 0x83, 0x52,
	0x0b, 0x4b, 0x53, 0x8b, 0x4b, 0x84, 0x44, 0xb8, 0x58, 0x0b, 0x41, 0x12, 0x12, 0x8c, 0x0a, 0x8c,
	0x1a, 0x9c, 0x41, 0x10, 0x8e, 0x51, 0x00, 0x17, 0x5b, 0x30, 0xd8, 0x6c, 0x21, 0x37, 0x2e, 0x56,
	0xb0, 0x46, 0x21, 0x25, 0x3d, 0x24, 0xf3, 0xf5, 0xb0, 0x1a, 0x26, 0x25, 0x8a, 0xa2, 0x06, 0x26,
	0xad, 0xc4, 0x60, 0xc0, 0x98, 0xc4, 0x06, 0x76, 0x87, 0x31, 0x20, 0x00, 0x00, 0xff, 0xff, 0xa5,
	0xe3, 0x95, 0x9c, 0xb4, 0x00, 0x00, 0x00,
}
