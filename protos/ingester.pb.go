// Code generated by protoc-gen-go. DO NOT EDIT.
// source: ingester.proto

package omniscience

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import empty "github.com/golang/protobuf/ptypes/empty"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// IngesterClient is the client API for Ingester service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type IngesterClient interface {
	// Ingests documents and indexes and uploads them to persistant storage.
	Ingest(ctx context.Context, opts ...grpc.CallOption) (Ingester_IngestClient, error)
}

type ingesterClient struct {
	cc *grpc.ClientConn
}

func NewIngesterClient(cc *grpc.ClientConn) IngesterClient {
	return &ingesterClient{cc}
}

func (c *ingesterClient) Ingest(ctx context.Context, opts ...grpc.CallOption) (Ingester_IngestClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Ingester_serviceDesc.Streams[0], "/omniscience.Ingester/Ingest", opts...)
	if err != nil {
		return nil, err
	}
	x := &ingesterIngestClient{stream}
	return x, nil
}

type Ingester_IngestClient interface {
	Send(*Document) error
	CloseAndRecv() (*empty.Empty, error)
	grpc.ClientStream
}

type ingesterIngestClient struct {
	grpc.ClientStream
}

func (x *ingesterIngestClient) Send(m *Document) error {
	return x.ClientStream.SendMsg(m)
}

func (x *ingesterIngestClient) CloseAndRecv() (*empty.Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(empty.Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// IngesterServer is the server API for Ingester service.
type IngesterServer interface {
	// Ingests documents and indexes and uploads them to persistant storage.
	Ingest(Ingester_IngestServer) error
}

func RegisterIngesterServer(s *grpc.Server, srv IngesterServer) {
	s.RegisterService(&_Ingester_serviceDesc, srv)
}

func _Ingester_Ingest_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(IngesterServer).Ingest(&ingesterIngestServer{stream})
}

type Ingester_IngestServer interface {
	SendAndClose(*empty.Empty) error
	Recv() (*Document, error)
	grpc.ServerStream
}

type ingesterIngestServer struct {
	grpc.ServerStream
}

func (x *ingesterIngestServer) SendAndClose(m *empty.Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *ingesterIngestServer) Recv() (*Document, error) {
	m := new(Document)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Ingester_serviceDesc = grpc.ServiceDesc{
	ServiceName: "omniscience.Ingester",
	HandlerType: (*IngesterServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Ingest",
			Handler:       _Ingester_Ingest_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "ingester.proto",
}

func init() { proto.RegisterFile("ingester.proto", fileDescriptor_ingester_0b1b112079b44562) }

var fileDescriptor_ingester_0b1b112079b44562 = []byte{
	// 130 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0xcb, 0xcc, 0x4b, 0x4f,
	0x2d, 0x2e, 0x49, 0x2d, 0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0xce, 0xcf, 0xcd, 0xcb,
	0x2c, 0x4e, 0xce, 0x4c, 0xcd, 0x4b, 0x4e, 0x95, 0xe2, 0x4b, 0xc9, 0x4f, 0x2e, 0xcd, 0x4d, 0xcd,
	0x2b, 0x81, 0x48, 0x4a, 0x49, 0xa7, 0xe7, 0xe7, 0xa7, 0xe7, 0xa4, 0xea, 0x83, 0x79, 0x49, 0xa5,
	0x69, 0xfa, 0xa9, 0xb9, 0x05, 0x25, 0x95, 0x10, 0x49, 0x23, 0x77, 0x2e, 0x0e, 0x4f, 0xa8, 0x59,
	0x42, 0xd6, 0x5c, 0x6c, 0x10, 0xb6, 0x90, 0xa8, 0x1e, 0x92, 0x81, 0x7a, 0x2e, 0x50, 0xf3, 0xa4,
	0xc4, 0xf4, 0x20, 0x46, 0xe9, 0xc1, 0x8c, 0xd2, 0x73, 0x05, 0x19, 0xa5, 0xc4, 0xa0, 0xc1, 0x98,
	0xc4, 0x06, 0x16, 0x33, 0x06, 0x04, 0x00, 0x00, 0xff, 0xff, 0x50, 0xf7, 0xb3, 0x1c, 0x9b, 0x00,
	0x00, 0x00,
}
