// Code generated by protoc-gen-go. DO NOT EDIT.
// source: ingestion.proto

package omniscience

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf1 "github.com/golang/protobuf/ptypes/empty"
import google_protobuf "github.com/golang/protobuf/ptypes/timestamp"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type IndexDocumentServiceRequest struct {
	Service          DocumentService            `protobuf:"varint,1,opt,name=service,enum=omniscience.DocumentService" json:"service,omitempty"`
	LastModifiedTime *google_protobuf.Timestamp `protobuf:"bytes,2,opt,name=last_modified_time,json=lastModifiedTime" json:"last_modified_time,omitempty"`
}

func (m *IndexDocumentServiceRequest) Reset()                    { *m = IndexDocumentServiceRequest{} }
func (m *IndexDocumentServiceRequest) String() string            { return proto.CompactTextString(m) }
func (*IndexDocumentServiceRequest) ProtoMessage()               {}
func (*IndexDocumentServiceRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

func (m *IndexDocumentServiceRequest) GetService() DocumentService {
	if m != nil {
		return m.Service
	}
	return DocumentService_ALL
}

func (m *IndexDocumentServiceRequest) GetLastModifiedTime() *google_protobuf.Timestamp {
	if m != nil {
		return m.LastModifiedTime
	}
	return nil
}

func init() {
	proto.RegisterType((*IndexDocumentServiceRequest)(nil), "omniscience.IndexDocumentServiceRequest")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Ingestion service

type IngestionClient interface {
	// Indexes documents and uploads them to persistant storage.
	Index(ctx context.Context, in *IndexDocumentServiceRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
}

type ingestionClient struct {
	cc *grpc.ClientConn
}

func NewIngestionClient(cc *grpc.ClientConn) IngestionClient {
	return &ingestionClient{cc}
}

func (c *ingestionClient) Index(ctx context.Context, in *IndexDocumentServiceRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/omniscience.Ingestion/Index", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Ingestion service

type IngestionServer interface {
	// Indexes documents and uploads them to persistant storage.
	Index(context.Context, *IndexDocumentServiceRequest) (*google_protobuf1.Empty, error)
}

func RegisterIngestionServer(s *grpc.Server, srv IngestionServer) {
	s.RegisterService(&_Ingestion_serviceDesc, srv)
}

func _Ingestion_Index_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IndexDocumentServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IngestionServer).Index(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/omniscience.Ingestion/Index",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IngestionServer).Index(ctx, req.(*IndexDocumentServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Ingestion_serviceDesc = grpc.ServiceDesc{
	ServiceName: "omniscience.Ingestion",
	HandlerType: (*IngestionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Index",
			Handler:    _Ingestion_Index_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ingestion.proto",
}

func init() { proto.RegisterFile("ingestion.proto", fileDescriptor2) }

var fileDescriptor2 = []byte{
	// 235 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0xcf, 0xcc, 0x4b, 0x4f,
	0x2d, 0x2e, 0xc9, 0xcc, 0xcf, 0xd3, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0xce, 0xcf, 0xcd,
	0xcb, 0x2c, 0x4e, 0xce, 0x4c, 0xcd, 0x4b, 0x4e, 0x95, 0xe2, 0x4b, 0xc9, 0x4f, 0x2e, 0xcd, 0x4d,
	0xcd, 0x2b, 0x81, 0x48, 0x4a, 0x49, 0xa7, 0xe7, 0xe7, 0xa7, 0xe7, 0xa4, 0xea, 0x83, 0x79, 0x49,
	0xa5, 0x69, 0xfa, 0xa9, 0xb9, 0x05, 0x25, 0x95, 0x50, 0x49, 0x79, 0x74, 0xc9, 0x92, 0xcc, 0xdc,
	0xd4, 0xe2, 0x92, 0xc4, 0xdc, 0x02, 0x88, 0x02, 0xa5, 0xf9, 0x8c, 0x5c, 0xd2, 0x9e, 0x79, 0x29,
	0xa9, 0x15, 0x2e, 0x50, 0x53, 0x83, 0x53, 0x8b, 0xca, 0x32, 0x93, 0x53, 0x83, 0x52, 0x0b, 0x4b,
	0x53, 0x8b, 0x4b, 0x84, 0xcc, 0xb8, 0xd8, 0x8b, 0x21, 0x22, 0x12, 0x8c, 0x0a, 0x8c, 0x1a, 0x7c,
	0x46, 0x32, 0x7a, 0x48, 0x8e, 0xd1, 0x43, 0xd7, 0x05, 0x53, 0x2c, 0xe4, 0xc1, 0x25, 0x94, 0x93,
	0x58, 0x5c, 0x12, 0x9f, 0x9b, 0x9f, 0x92, 0x99, 0x96, 0x99, 0x9a, 0x12, 0x0f, 0xb2, 0x58, 0x82,
	0x49, 0x81, 0x51, 0x83, 0xdb, 0x48, 0x4a, 0x0f, 0xe2, 0x2a, 0x3d, 0x98, 0xab, 0xf4, 0x42, 0x60,
	0xae, 0x0a, 0x12, 0x00, 0xe9, 0xf2, 0x85, 0x6a, 0x02, 0x09, 0x1b, 0x45, 0x70, 0x71, 0x7a, 0xc2,
	0xc2, 0x43, 0xc8, 0x9b, 0x8b, 0x15, 0xec, 0x5a, 0x21, 0x0d, 0x14, 0x67, 0xe0, 0xf1, 0x81, 0x94,
	0x18, 0x86, 0x6d, 0xae, 0xa0, 0x00, 0x52, 0x62, 0x48, 0x62, 0x03, 0x8b, 0x18, 0x03, 0x02, 0x00,
	0x00, 0xff, 0xff, 0x56, 0xb9, 0x2b, 0x34, 0x70, 0x01, 0x00, 0x00,
}
